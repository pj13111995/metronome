{"version":3,"sources":["component/click1.wav","component/click2.wav","component/metronome.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Metronome","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playing","count","bpm","beatsPerMeasure","handleBpmChange","event","target","value","_this$state","clearInterval","timer","setInterval","playclick","setState","handleButtonChange","console","log","_this$state2","click2","play","click1","startstop","Audio","_this$state3","react_default","a","createElement","className","type","min","max","onChange","Button","bsStyle","onClick","Component","App","Fragment","component_metronome","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yTC2EzBC,cArEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAKFI,MAAQ,CACNC,SAAS,EACTC,MAAO,EACPC,IAAK,IACLC,gBAAiB,GAVAX,EAYnBY,gBAAkB,SAAAC,GAChB,IAAIH,EAAMG,EAAMC,OAAOC,MADEC,EAEEhB,EAAKO,MAAxBC,EAFiBQ,EAEjBR,QAFiBQ,EAERP,MACbD,IACFS,cAAcjB,EAAKkB,OACnBlB,EAAKkB,MAAQC,YAAYnB,EAAKoB,UAAY,GAAKV,EAAO,MAExDV,EAAKqB,SAAS,CAAEZ,MAAO,EAAGC,SAnBTV,EAqBnBsB,mBAAqB,SAAAT,GACnBU,QAAQC,IAAIX,EAAMC,SAtBDd,EAwBnBoB,UAAY,WAAM,IAAAK,EACmBzB,EAAKO,MADxBkB,EACRhB,MADQgB,EACDd,kBAGiB,EAC9BX,EAAK0B,OAAOC,OAEZ3B,EAAK4B,OAAOD,OAId3B,EAAKqB,SAAS,SAAAd,GAAK,MAAK,CACtBE,OAAQF,EAAME,MAAQ,GAAKF,EAAMI,oBApClBX,EAuCnB6B,UAAY,WACN7B,EAAKO,MAAMC,SACbS,cAAcjB,EAAKkB,OACnBlB,EAAKqB,SAAS,CAAEb,SAAS,MAEzBR,EAAKkB,MAAQC,YAAYnB,EAAKoB,UAAY,GAAKpB,EAAKO,MAAMG,IAAO,KACjEV,EAAKqB,SAAS,CAAEb,SAAS,MA1C3BR,EAAK4B,OAAS,IAAIE,MAAMF,KACxB5B,EAAK0B,OAAS,IAAII,MAAMJ,KAJP1B,wEAiDV,IAAA+B,EACkB5B,KAAKI,MAAtBC,EADDuB,EACCvB,QAASE,EADVqB,EACUrB,IACjB,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAIxB,EAAJ,QACAsB,EAAAC,EAAAC,cAAA,SACEE,KAAK,QACLC,IAAI,KACJC,IAAI,MACJC,SAAUpC,KAAKS,gBACfG,MAAOL,IAETsB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASvC,KAAK0B,WACpCrB,EAAU,OAAS,gBA/DNmC,aCSTC,mLARX,OACEZ,EAAAC,EAAAC,cAACF,EAAAC,EAAMY,SAAP,KACEb,EAAAC,EAAAC,cAACY,EAAD,cAJUH,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.035cbaf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from \"react\";\r\nimport \"./metronome.css\";\r\nimport click1 from \"./click1.wav\";\r\nimport click2 from \"./click2.wav\";\r\nimport { Button } from \"react-bootstrap\";\r\nclass Metronome extends Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.click1 = new Audio(click1);\r\n    this.click2 = new Audio(click2);\r\n  }\r\n  state = {\r\n    playing: false,\r\n    count: 0,\r\n    bpm: 100,\r\n    beatsPerMeasure: 4\r\n  };\r\n  handleBpmChange = event => {\r\n    var bpm = event.target.value;\r\n    const { playing, count } = this.state;\r\n    if (playing) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(this.playclick, (60 / bpm) * 1000);\r\n    }\r\n    this.setState({ count: 0, bpm });\r\n  };\r\n  handleButtonChange = event => {\r\n    console.log(event.target);\r\n  };\r\n  playclick = () => {\r\n    const { count, beatsPerMeasure } = this.state;\r\n\r\n    // The first beat will have a different sound than the others\r\n    if (count % beatsPerMeasure === 0) {\r\n      this.click2.play();\r\n    } else {\r\n      this.click1.play();\r\n    }\r\n\r\n    // Keep track of which beat we're on\r\n    this.setState(state => ({\r\n      count: (state.count + 1) % state.beatsPerMeasure\r\n    }));\r\n  };\r\n  startstop = () => {\r\n    if (this.state.playing) {\r\n      clearInterval(this.timer);\r\n      this.setState({ playing: false });\r\n    } else {\r\n      this.timer = setInterval(this.playclick, (60 / this.state.bpm) * 1000);\r\n      this.setState({ playing: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { playing, bpm } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <p>{bpm} BPM</p>\r\n        <input\r\n          type=\"range\"\r\n          min=\"60\"\r\n          max=\"240\"\r\n          onChange={this.handleBpmChange}\r\n          value={bpm}\r\n        />\r\n        <Button bsStyle=\"danger\" onClick={this.startstop}>\r\n          {playing ? \"Stop\" : \"Play\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Metronome;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport Metronome from \"./component/metronome\";\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Metronome />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// ReactDOM.render(<Test />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}